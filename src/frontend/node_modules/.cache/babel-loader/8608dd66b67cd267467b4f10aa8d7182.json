{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport useLoggerService from './Diagnostics/LoggerService';\nvar DbActions = {\n  add: 'create',\n  delete: 'delete',\n  update: 'update',\n  removeAll: 'removeAll'\n};\n\nvar useDbPresistentLocationService = function useDbPresistentLocationService() {\n  var logger = useLoggerService();\n\n  var add =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(location) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatchDbAction(DbActions.add, location);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function add(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var remove =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(location) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dispatchDbAction(DbActions.delete, location);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function remove(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var edit =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(location) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return dispatchDbAction(DbActions.update, location);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function edit(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var removeAll =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              logger.warning(\"Remove all is not implemented yet\");\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function removeAll() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return {\n    add: add,\n    remove: remove,\n    edit: edit,\n    removeAll: removeAll\n  };\n};\n\nvar dispatchDbAction =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(dbAction, data) {\n    var url, logger, rawResponse, content;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            url = 'http://localhost:5000/locations/' + dbAction;\n            logger = useLoggerService();\n            _context5.next = 4;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data)\n            });\n\n          case 4:\n            rawResponse = _context5.sent;\n\n            if (!(rawResponse.status !== 200 && rawResponse.status !== 201)) {\n              _context5.next = 8;\n              break;\n            }\n\n            logger.error(\"[DbPresistentLocationService] Message: \".concat(rawResponse.statusText, \" Code: \").concat(rawResponse.status));\n            throw new Error(rawResponse);\n\n          case 8:\n            _context5.next = 10;\n            return rawResponse.json();\n\n          case 10:\n            content = _context5.sent;\n            return _context5.abrupt(\"return\", content);\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function dispatchDbAction(_x4, _x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexport default useDbPresistentLocationService;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/Services/DbPersistentLocationService.js"],"names":["useLoggerService","DbActions","add","delete","update","removeAll","useDbPresistentLocationService","logger","location","dispatchDbAction","remove","edit","warning","dbAction","data","url","fetch","method","headers","body","JSON","stringify","rawResponse","status","error","statusText","Error","json","content"],"mappings":"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","sourcesContent":["import useLoggerService from './Diagnostics/LoggerService'\r\n\r\nconst DbActions = {\r\n    add: 'create',\r\n    delete: 'delete',\r\n    update: 'update',\r\n    removeAll: 'removeAll'\r\n}\r\n\r\nconst useDbPresistentLocationService = () => {\r\n    const logger = useLoggerService();\r\n\r\n    var add = async (location) => {\r\n        await dispatchDbAction(DbActions.add, location);\r\n    }\r\n\r\n    var remove = async (location) => {\r\n        await dispatchDbAction(DbActions.delete, location);\r\n    }\r\n\r\n    var edit = async (location) => {\r\n        await dispatchDbAction(DbActions.update, location);\r\n    }\r\n\r\n    var removeAll = async () => {\r\n        logger.warning(\"Remove all is not implemented yet\");\r\n    }\r\n\r\n    return {\r\n        add: add,\r\n        remove: remove,\r\n        edit: edit,\r\n        removeAll: removeAll\r\n    }\r\n}\r\n\r\nconst dispatchDbAction = async (dbAction, data) => {\r\n    let url = 'http://localhost:5000/locations/' + dbAction;\r\n    var logger = useLoggerService();\r\n\r\n    const rawResponse = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n\r\n    if(rawResponse.status !== 200 && rawResponse.status !== 201){\r\n        logger.error(`[DbPresistentLocationService] Message: ${rawResponse.statusText} Code: ${rawResponse.status}`);\r\n        throw new Error(rawResponse);\r\n    }\r\n    \r\n    const content = await rawResponse.json();\r\n    return content;\r\n}\r\n\r\nexport default useDbPresistentLocationService;"]},"metadata":{},"sourceType":"module"}