{"ast":null,"code":"import _classCallCheck from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport useConsoleLog from './ConsoleLog';\nimport useDbLog from './DbLog';\nvar logLevel = {\n  error: 'error',\n  warning: 'warning',\n  info: 'info',\n  debug: 'debug'\n};\n\nvar Log = function Log(userId, timestamp, level, message) {\n  var data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n  _classCallCheck(this, Log);\n\n  this.userId = userId;\n  this.timestamp = timestamp;\n  this.level = level;\n  this.message = message;\n  this.data = data ? JSON.stringify(data) : null;\n};\n\nvar useLoggerService = function useLoggerService() {\n  var loggers = [useConsoleLog(), useDbLog()];\n  var userID = 0;\n\n  var _generateLog = function _generateLog(level, message) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return new Log(userID, new Date().toISOString(), level, message, data);\n  };\n\n  var error = function error(message, exception) {\n    var logEntry = _generateLog(logLevel.error, message, exception);\n\n    loggers.forEach(function (logger) {\n      logger.error(logEntry);\n    });\n  };\n\n  var warning = function warning(message) {\n    var logEntry = _generateLog(logLevel.warning, message);\n\n    loggers.forEach(function (logger) {\n      logger.warning(logEntry);\n    });\n  };\n\n  var info = function info(message) {\n    var logEntry = _generateLog(logLevel.info, message);\n\n    loggers.forEach(function (logger) {\n      logger.info(logEntry);\n    });\n  };\n\n  var debug = function debug(message, data) {\n    var logEntry = _generateLog(logLevel.debug, message, data);\n\n    loggers.forEach(function (logger) {\n      logger.debug(logEntry);\n    });\n  };\n\n  return {\n    error: error,\n    warning: warning,\n    info: info,\n    debug: debug\n  };\n};\n\nexport default useLoggerService;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/frontend/src/Services/Diagnostics/LoggerService.js"],"names":["useConsoleLog","useDbLog","logLevel","error","warning","info","debug","Log","userId","timestamp","level","message","data","JSON","stringify","useLoggerService","loggers","userID","_generateLog","Date","toISOString","exception","logEntry","forEach","logger"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,SAArB;AAEA,IAAMC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE,OADM;AAEbC,EAAAA,OAAO,EAAE,SAFI;AAGbC,EAAAA,IAAI,EAAE,MAHO;AAIbC,EAAAA,KAAK,EAAE;AAJM,CAAjB;;IAOMC,G,GACF,aAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA2D;AAAA,MAAZC,IAAY,uEAAL,IAAK;;AAAA;;AACvD,OAAKJ,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKC,IAAL,GAAYA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAH,GAA0B,IAA1C;AACH,C;;AASL,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3B,MAAMC,OAAO,GAAG,CAAChB,aAAa,EAAd,EAAkBC,QAAQ,EAA1B,CAAhB;AACA,MAAMgB,MAAM,GAAG,CAAf;;AAEA,MAAIC,YAAY,GAAG,SAAfA,YAAe,CAACR,KAAD,EAAQC,OAAR,EAAiC;AAAA,QAAhBC,IAAgB,uEAAT,IAAS;AAChD,WAAO,IAAIL,GAAJ,CAAQU,MAAR,EAAgB,IAAIE,IAAJ,GAAWC,WAAX,EAAhB,EAA0CV,KAA1C,EAAiDC,OAAjD,EAA0DC,IAA1D,CAAP;AACH,GAFD;;AAIA,MAAIT,KAAK,GAAG,SAARA,KAAQ,CAACQ,OAAD,EAAUU,SAAV,EAAwB;AAChC,QAAIC,QAAQ,GAAGJ,YAAY,CAAChB,QAAQ,CAACC,KAAV,EAAiBQ,OAAjB,EAA0BU,SAA1B,CAA3B;;AAEAL,IAAAA,OAAO,CAACO,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAACrB,KAAP,CAAamB,QAAb;AACH,KAFD;AAGH,GAND;;AAQA,MAAIlB,OAAO,GAAG,SAAVA,OAAU,CAACO,OAAD,EAAa;AACvB,QAAIW,QAAQ,GAAGJ,YAAY,CAAChB,QAAQ,CAACE,OAAV,EAAmBO,OAAnB,CAA3B;;AAEAK,IAAAA,OAAO,CAACO,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAACpB,OAAP,CAAekB,QAAf;AACH,KAFD;AAGH,GAND;;AAQA,MAAIjB,IAAI,GAAG,SAAPA,IAAO,CAACM,OAAD,EAAa;AACpB,QAAIW,QAAQ,GAAGJ,YAAY,CAAChB,QAAQ,CAACG,IAAV,EAAgBM,OAAhB,CAA3B;;AAEAK,IAAAA,OAAO,CAACO,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAACnB,IAAP,CAAYiB,QAAZ;AACH,KAFD;AAGH,GAND;;AAQA,MAAIhB,KAAK,GAAG,SAARA,KAAQ,CAACK,OAAD,EAAUC,IAAV,EAAmB;AAC3B,QAAIU,QAAQ,GAAGJ,YAAY,CAAChB,QAAQ,CAACI,KAAV,EAAiBK,OAAjB,EAA0BC,IAA1B,CAA3B;;AAEAI,IAAAA,OAAO,CAACO,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAAClB,KAAP,CAAagB,QAAb;AACH,KAFD;AAGH,GAND;;AAQA,SAAO;AACHnB,IAAAA,KAAK,EAAEA,KADJ;AAEHC,IAAAA,OAAO,EAAEA,OAFN;AAGHC,IAAAA,IAAI,EAAEA,IAHH;AAIHC,IAAAA,KAAK,EAAEA;AAJJ,GAAP;AAMH,CA9CD;;AAgDA,eAAeS,gBAAf","sourcesContent":["import useConsoleLog from './ConsoleLog'\r\nimport useDbLog from './DbLog'\r\n\r\nconst logLevel = {\r\n    error: 'error',\r\n    warning: 'warning',\r\n    info: 'info',\r\n    debug: 'debug'\r\n}\r\n\r\nclass Log{\r\n    constructor(userId, timestamp, level, message, data = null){\r\n        this.userId = userId;\r\n        this.timestamp = timestamp;\r\n        this.level = level;\r\n        this.message = message;\r\n        this.data = data ? JSON.stringify(data) : null\r\n    }\r\n\r\n    userId;\r\n    timestamp;\r\n    level;\r\n    message;\r\n    data;\r\n}\r\n\r\nconst useLoggerService = () => {\r\n    const loggers = [useConsoleLog(), useDbLog()]\r\n    const userID = 0;\r\n\r\n    var _generateLog = (level, message, data = null) => {\r\n        return new Log(userID, new Date().toISOString(), level, message, data)\r\n    }\r\n\r\n    var error = (message, exception) => {\r\n        var logEntry = _generateLog(logLevel.error, message, exception);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.error(logEntry);\r\n        })\r\n    }\r\n\r\n    var warning = (message) => {\r\n        var logEntry = _generateLog(logLevel.warning, message);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.warning(logEntry);\r\n        })\r\n    }\r\n\r\n    var info = (message) => {\r\n        var logEntry = _generateLog(logLevel.info, message);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.info(logEntry);\r\n        })\r\n    }\r\n\r\n    var debug = (message, data) => {  \r\n        var logEntry = _generateLog(logLevel.debug, message, data);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.debug(logEntry);\r\n        })\r\n    }\r\n\r\n    return {\r\n        error: error,\r\n        warning: warning,\r\n        info: info,\r\n        debug: debug\r\n    }\r\n}\r\n\r\nexport default useLoggerService;"]},"metadata":{},"sourceType":"module"}