{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectDestructuringEmpty from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectDestructuringEmpty\";\nimport _slicedToArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useLocationsState, LocationsStateActions } from '../State/LocationsState';\nimport useNotificationService from '../Services/NotificationService';\nimport useDbPersistenceService from './DbPersistentLocationService';\nimport useLoggerService from './Diagnostics/LoggerService';\n\nvar useLocationService = function useLocationService() {\n  var _useLocationsState = useLocationsState(),\n      _useLocationsState2 = _slicedToArray(_useLocationsState, 2);\n\n  _objectDestructuringEmpty(_useLocationsState2[0]);\n\n  var dispatchLocations = _useLocationsState2[1];\n  var notificationService = useNotificationService();\n  var dbPersistentLocationService = useDbPersistenceService();\n  var logger = useLoggerService();\n\n  var setLoading = function setLoading() {\n    dispatchLocations({\n      type: LocationsStateActions.isLoading,\n      data: true\n    });\n  };\n\n  var clearLoading = function clearLoading() {\n    dispatchLocations({\n      type: LocationsStateActions.isLoading,\n      data: false\n    });\n  };\n\n  var add =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(location) {\n      var locationData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading();\n              _context.prev = 1;\n              _context.next = 4;\n              return dbPersistentLocationService.add(location);\n\n            case 4:\n              locationData = _context.sent;\n              dispatchLocations({\n                type: LocationsStateActions.addLocation,\n                data: locationData\n              });\n              notificationService.success(\"New location added: \".concat(locationData.name));\n              logger.info(\"[LocationService] Successfully added location -> Id: \".concat(locationData.id, \" Name: \").concat(locationData.name));\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              notificationService.error(\"Error while adding location: \".concat(location.name));\n              logger.error(\"Error while adding new location: Name: \".concat(location.name), _context.t0);\n\n            case 14:\n              _context.prev = 14;\n              clearLoading();\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10, 14, 17]]);\n    }));\n\n    return function add(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var edit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(location) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading();\n              _context2.prev = 1;\n              _context2.next = 4;\n              return dbPersistentLocationService.edit(location);\n\n            case 4:\n              dispatchLocations({\n                type: LocationsStateActions.editLocation,\n                data: location\n              });\n              notificationService.success(\"Location modified: \".concat(location.name));\n              logger.info(\"[LocationService] Successfully edited location -> Id: \".concat(location.id, \" Name: \").concat(location.name));\n              _context2.next = 13;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              notificationService.error(\"Error while editing location: \".concat(location.name));\n              logger.error(\"Error while editing location: Id: \".concat(location.id, \" Name: \").concat(location.name), _context2.t0);\n\n            case 13:\n              _context2.prev = 13;\n              clearLoading();\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9, 13, 16]]);\n    }));\n\n    return function edit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var remove =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(location) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setLoading();\n              _context3.prev = 1;\n              _context3.next = 4;\n              return dbPersistentLocationService.remove(location);\n\n            case 4:\n              dispatchLocations({\n                type: LocationsStateActions.removeLocation,\n                data: location\n              });\n              notificationService.success(\"Location removed: \".concat(location.name));\n              logger.info(\"[LocationService] Successfully removed location -> Id: \".concat(location.id, \" Name: \").concat(location.name));\n              _context3.next = 13;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](1);\n              notificationService.error(\"Error while removing location: \".concat(location.name));\n              logger.error(\"Error while removing location: Id: \".concat(location.id, \" Name: \").concat(location.name), _context3.t0);\n\n            case 13:\n              _context3.prev = 13;\n              clearLoading();\n              return _context3.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 9, 13, 16]]);\n    }));\n\n    return function remove(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    add: add,\n    edit: edit,\n    remove: remove\n  };\n};\n\nexport default useLocationService;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/Services/LocationService.js"],"names":["useLocationsState","LocationsStateActions","useNotificationService","useDbPersistenceService","useLoggerService","useLocationService","dispatchLocations","notificationService","dbPersistentLocationService","logger","setLoading","type","isLoading","data","clearLoading","add","location","locationData","addLocation","success","name","info","id","error","edit","editLocation","remove","removeLocation"],"mappings":"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","sourcesContent":["import { useLocationsState, LocationsStateActions } from '../State/LocationsState'\r\nimport useNotificationService from '../Services/NotificationService'\r\nimport useDbPersistenceService from './DbPersistentLocationService'\r\nimport useLoggerService from './Diagnostics/LoggerService'\r\n\r\nconst useLocationService = () => {\r\n    const [{}, dispatchLocations] = useLocationsState();\r\n    const notificationService = useNotificationService();\r\n    const dbPersistentLocationService = useDbPersistenceService();\r\n    const logger = useLoggerService();\r\n\r\n    var setLoading = () => {\r\n        dispatchLocations({\r\n            type: LocationsStateActions.isLoading, \r\n            data: true});\r\n    }\r\n\r\n    var clearLoading = () => {\r\n        dispatchLocations({\r\n            type: LocationsStateActions.isLoading, \r\n            data: false});\r\n    }\r\n\r\n    var add = async (location) => {\r\n        setLoading();\r\n        try{\r\n            var locationData = await dbPersistentLocationService.add(location)\r\n            dispatchLocations({\r\n                type: LocationsStateActions.addLocation, \r\n                data: locationData});\r\n            \r\n            notificationService.success(`New location added: ${locationData.name}`);\r\n            logger.info(`[LocationService] Successfully added location -> Id: ${locationData.id} Name: ${locationData.name}`)\r\n        }\r\n        catch(e)\r\n        {\r\n            notificationService.error(`Error while adding location: ${location.name}`);\r\n            logger.error(`Error while adding new location: Name: ${location.name}`, e);\r\n        }\r\n        finally{\r\n            clearLoading();\r\n        }\r\n  \r\n    }\r\n\r\n    var edit = async (location) => {\r\n        setLoading();\r\n        try{\r\n            await dbPersistentLocationService.edit(location)\r\n            dispatchLocations({\r\n                type: LocationsStateActions.editLocation, \r\n                data: location})\r\n    \r\n            notificationService.success(`Location modified: ${location.name}`);\r\n            logger.info(`[LocationService] Successfully edited location -> Id: ${location.id} Name: ${location.name}`)\r\n        }\r\n        catch(e)\r\n        {\r\n            notificationService.error(`Error while editing location: ${location.name}`);\r\n            logger.error(`Error while editing location: Id: ${location.id} Name: ${location.name}`, e);\r\n        }\r\n        finally{\r\n            clearLoading();\r\n        }\r\n    }\r\n\r\n    var remove = async (location) => {\r\n        setLoading();\r\n        try{\r\n            await dbPersistentLocationService.remove(location)\r\n            dispatchLocations({\r\n                type: LocationsStateActions.removeLocation, \r\n                data: location})\r\n                \r\n            notificationService.success(`Location removed: ${location.name}`);\r\n            logger.info(`[LocationService] Successfully removed location -> Id: ${location.id} Name: ${location.name}`)\r\n        }\r\n        catch(e)\r\n        {\r\n            notificationService.error(`Error while removing location: ${location.name}`);\r\n            logger.error(`Error while removing location: Id: ${location.id} Name: ${location.name}`, e);\r\n        }\r\n        finally{\r\n            clearLoading();\r\n        }\r\n    }\r\n\r\n    return {\r\n        add: add, \r\n        edit: edit, \r\n        remove: remove}\r\n}\r\n\r\nexport default useLocationService;"]},"metadata":{},"sourceType":"module"}