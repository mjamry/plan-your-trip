{"ast":null,"code":"import _toConsumableArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\src\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\src\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\src\\\\frontend\\\\src\\\\State\\\\ListsState.js\";\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { LocationFormStateActions } from '../components/modals/LocationDetailsForm/LocationDetailsFormState';\nvar ListViewType = {\n  grid: 'grid',\n  list: 'list'\n};\nvar ListsStateActions = {\n  selectList: 'selectList',\n  loadLists: 'loadLists',\n  setView: 'setView',\n  addList: 'addList',\n  editList: 'editList',\n  removeList: 'removeList',\n  isLoading: 'isLoading'\n};\nvar ListsState = {\n  lists: [],\n  selectedListId: 2,\n  view: ListViewType.grid,\n  isLoading: false\n};\nvar ListStateContext = createContext();\n\nvar ListsStateProvider = function ListsStateProvider(_ref) {\n  var children = _ref.children;\n  return React.createElement(ListStateContext.Provider, {\n    value: useReducer(_reducer, ListsState),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, children);\n};\n\nvar useListsState = function useListsState() {\n  return useContext(ListStateContext);\n};\n\nvar _reducer = function _reducer(state, action) {\n  switch (action.type) {\n    case ListsStateActions.selectList:\n      var newState = _objectSpread({}, state, {\n        selectedListId: action.data\n      });\n\n      break;\n\n    case ListsStateActions.loadLists:\n      var newState = _objectSpread({}, state, {\n        lists: action.data\n      });\n\n      break;\n\n    case ListsStateActions.removeList:\n      var updatedLists = state.lists.filter(function (l) {\n        return l.id !== action.data.id;\n      }) || [];\n      newState = _objectSpread({}, state, {\n        lists: updatedLists,\n        selectedListId: updatedLists[0].id\n      });\n      break;\n\n    case ListsStateActions.editList:\n      var editedItemIndex = state.lists.findIndex(function (l) {\n        return l.id === action.data.id;\n      });\n      state.lists[editedItemIndex] = action.data;\n      newState = _objectSpread({}, state, {\n        lists: _toConsumableArray(state.lists)\n      });\n      break;\n\n    case ListsStateActions.addList:\n      newState = _objectSpread({}, state, {\n        lists: [].concat(_toConsumableArray(state.lists), [action.data])\n      });\n      break;\n\n    case ListsStateActions.setView:\n      var newState = _objectSpread({}, state, {\n        view: action.data\n      });\n\n      break;\n\n    case ListsStateActions.isLoading:\n      newState = _objectSpread({}, state, {\n        isLoading: action.data\n      });\n      break;\n\n    default:\n      var newState = state;\n      break;\n  }\n\n  return newState;\n};\n\nexport default ListsStateProvider;\nexport { ListStateContext, ListsStateProvider, ListsStateActions, useListsState, ListViewType };","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/frontend/src/State/ListsState.js"],"names":["React","createContext","useContext","useReducer","LocationFormStateActions","ListViewType","grid","list","ListsStateActions","selectList","loadLists","setView","addList","editList","removeList","isLoading","ListsState","lists","selectedListId","view","ListStateContext","ListsStateProvider","children","_reducer","useListsState","state","action","type","newState","data","updatedLists","filter","l","id","editedItemIndex","findIndex"],"mappings":"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","sourcesContent":["import React, {createContext, useContext, useReducer} from 'react'\r\nimport { LocationFormStateActions } from '../components/modals/LocationDetailsForm/LocationDetailsFormState';\r\n\r\nconst ListViewType = {\r\n    grid: 'grid',\r\n    list: 'list'\r\n}\r\n\r\nconst ListsStateActions = {\r\n    selectList: 'selectList',\r\n    loadLists: 'loadLists',\r\n    setView: 'setView',\r\n    addList: 'addList',\r\n    editList: 'editList',\r\n    removeList: 'removeList',\r\n    isLoading: 'isLoading'\r\n}\r\n\r\nconst ListsState = {\r\n    lists: [],\r\n    selectedListId: 2,\r\n    view: ListViewType.grid,\r\n    isLoading: false\r\n}\r\n\r\nconst ListStateContext = createContext();\r\n\r\nconst ListsStateProvider = ({children}) => {\r\n    return (\r\n        <ListStateContext.Provider value={useReducer(_reducer, ListsState)}>\r\n            {children}\r\n        </ListStateContext.Provider>\r\n    )\r\n}\r\n\r\nvar useListsState = () => useContext(ListStateContext);\r\n\r\nconst _reducer = (state, action) => {\r\n    switch(action.type){\r\n        case ListsStateActions.selectList:\r\n            var newState = {...state, selectedListId: action.data}\r\n            break;\r\n        case ListsStateActions.loadLists:\r\n            var newState = {...state, lists: action.data}\r\n            break;\r\n        case ListsStateActions.removeList:\r\n            var updatedLists = state.lists.filter(l => l.id !== action.data.id) || [];\r\n            newState = { ...state, lists: updatedLists, selectedListId: updatedLists[0].id };\r\n            break;\r\n        case ListsStateActions.editList: \r\n            var editedItemIndex = state.lists.findIndex(l => l.id === action.data.id);\r\n            state.lists[editedItemIndex] = action.data;\r\n            newState = { ...state, lists: [...state.lists] };\r\n            break;\r\n        case ListsStateActions.addList:\r\n            newState = { ...state, lists: [...state.lists, action.data] };\r\n            break;\r\n        case ListsStateActions.setView:\r\n            var newState = {...state, view: action.data}\r\n            break;\r\n        case ListsStateActions.isLoading:\r\n            newState = { ...state, isLoading: action.data };\r\n            break;\r\n        default: \r\n            var newState = state;\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}\r\n\r\nexport default ListsStateProvider;\r\nexport {ListStateContext, ListsStateProvider, ListsStateActions, useListsState, ListViewType}"]},"metadata":{},"sourceType":"module"}