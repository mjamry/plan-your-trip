{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\src\\\\components\\\\ListView.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useLocationsState, LocationsStateActions } from '../State/LocationsState';\nvar STYLE = \"position: absolute;left: 0; bottom: 0; height: 200px; width: 200px; border solid 1px black\";\n\nvar ListView = function ListView() {\n  var _useLocationsState = useLocationsState(),\n      _useLocationsState2 = _slicedToArray(_useLocationsState, 2),\n      state = _useLocationsState2[0],\n      dispatchLocations = _useLocationsState2[1];\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      lists = _useState2[0],\n      setLists = _useState2[1];\n\n  useEffect(function () {\n    load();\n  }, []);\n\n  var load =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var lists;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatchDbAction();\n\n            case 2:\n              lists = _context.sent;\n              setLists(lists);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function load() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var renderLists = function renderLists() {\n    if (lists) return lists.map(function (list) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, list.id);\n    });\n    return '';\n  };\n\n  return React.createElement(\"div\", {\n    style: \"position: absolute;left: 0; bottom: 0; height: 200px; width: 200px; border solid 1px black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, renderLists());\n};\n\nvar dispatchDbAction =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var url, rawResponse, content;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = 'http://localhost:5000/lists/';\n            _context2.next = 3;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: ''\n            });\n\n          case 3:\n            rawResponse = _context2.sent;\n\n            if (!(rawResponse.status !== 200 && rawResponse.status !== 201)) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error(rawResponse);\n\n          case 6:\n            _context2.next = 8;\n            return rawResponse.json();\n\n          case 8:\n            content = _context2.sent;\n            return _context2.abrupt(\"return\", content);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function dispatchDbAction() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default ListView;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/components/ListView.js"],"names":["React","useEffect","useState","useLocationsState","LocationsStateActions","STYLE","ListView","state","dispatchLocations","lists","setLists","load","dispatchDbAction","renderLists","map","list","id","url","fetch","method","headers","body","rawResponse","status","Error","json","content"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,yBAAzD;AAEA,IAAMC,KAAK,GAAG,4FAAd;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,2BACgBH,iBAAiB,EADjC;AAAA;AAAA,MACZI,KADY;AAAA,MACLC,iBADK;;AAAA,kBAEON,QAAQ,EAFf;AAAA;AAAA,MAEZO,KAFY;AAAA,MAELC,QAFK;;AAInBT,EAAAA,SAAS,CAAC,YAAI;AACVU,IAAAA,IAAI;AACP,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAIA,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACWC,gBAAgB,EAD3B;;AAAA;AACHH,cAAAA,KADG;AAEPC,cAAAA,QAAQ,CAACD,KAAD,CAAR;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJE,IAAI;AAAA;AAAA;AAAA,KAAR;;AAKA,MAAIE,WAAW,GAAG,SAAdA,WAAc,GAAM;AACpB,QAAGJ,KAAH,EACA,OAAOA,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD;AAAA,aACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,IAAI,CAACC,EAAX,CADa;AAAA,KAAV,CAAP;AAIA,WAAO,EAAP;AACH,GAPD;;AASA,SAAQ;AAAK,IAAA,KAAK,EAAE,4FAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACHH,WAAW,EADR,CAAR;AAGH,CAzBD;;AA2BA,IAAMD,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBK,YAAAA,GADiB,GACX,8BADW;AAAA;AAAA,mBAGKC,KAAK,CAACD,GAAD,EAAM;AACjCE,cAAAA,MAAM,EAAE,MADyB;AAEjCC,cAAAA,OAAO,EAAE;AACL,0BAAU,kBADL;AAEL,gCAAgB;AAFX,eAFwB;AAMjCC,cAAAA,IAAI,EAAE;AAN2B,aAAN,CAHV;;AAAA;AAGfC,YAAAA,WAHe;;AAAA,kBAYlBA,WAAW,CAACC,MAAZ,KAAuB,GAAvB,IAA8BD,WAAW,CAACC,MAAZ,KAAuB,GAZnC;AAAA;AAAA;AAAA;;AAAA,kBAaX,IAAIC,KAAJ,CAAUF,WAAV,CAbW;;AAAA;AAAA;AAAA,mBAgBCA,WAAW,CAACG,IAAZ,EAhBD;;AAAA;AAgBfC,YAAAA,OAhBe;AAAA,8CAiBdA,OAjBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBd,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAoBA,eAAeN,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useLocationsState, LocationsStateActions } from '../State/LocationsState'\r\n\r\nconst STYLE = \"position: absolute;left: 0; bottom: 0; height: 200px; width: 200px; border solid 1px black\"\r\n\r\nconst ListView = () => {\r\n    const [state, dispatchLocations] = useLocationsState();\r\n    const [lists, setLists] = useState();\r\n\r\n    useEffect(()=>{\r\n        load();\r\n    }, [])\r\n\r\n    var load = async () => {\r\n        var lists = await dispatchDbAction();\r\n        setLists(lists);\r\n    }\r\n\r\n    var renderLists = () => {\r\n        if(lists)\r\n        return lists.map((list)=>(\r\n            <div>{list.id}</div>\r\n        ))\r\n\r\n        return ''\r\n    }\r\n\r\n    return (<div style={\"position: absolute;left: 0; bottom: 0; height: 200px; width: 200px; border solid 1px black\"}>\r\n        {renderLists()}\r\n    </div>)\r\n}\r\n\r\nconst dispatchDbAction = async () => {\r\n    let url = 'http://localhost:5000/lists/';\r\n\r\n    const rawResponse = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: ''\r\n    });\r\n\r\n    if(rawResponse.status !== 200 && rawResponse.status !== 201){\r\n        throw new Error(rawResponse);\r\n    }\r\n    \r\n    const content = await rawResponse.json();\r\n    return content;\r\n}\r\n\r\nexport default ListView;"]},"metadata":{},"sourceType":"module"}