{"ast":null,"code":"import _slicedToArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { LocationCoordinatesForm, LocationCoordinatesFormValidator, LocationDetailsForm, LocationDetailsFormValidator } from './Steps';\nimport { useLocationFormState, LocationFormStateActions } from '../LocationDetailsFormState';\nexport var FirstStep = 0;\nexport var LastStep = 1;\nvar steps = [{\n  view: LocationDetailsForm,\n  validator: LocationDetailsFormValidator()\n}, {\n  view: LocationCoordinatesForm,\n  validator: LocationCoordinatesFormValidator()\n}];\n\nvar StepsCoordinator = function StepsCoordinator() {\n  var _useLocationFormState = useLocationFormState(),\n      _useLocationFormState2 = _slicedToArray(_useLocationFormState, 2),\n      formState = _useLocationFormState2[0],\n      dispatchFormState = _useLocationFormState2[1];\n\n  var next = function next() {\n    if (canNext()) {\n      var nextStep = formState.step + 1 === LastStep ? LastStep : formState.step + 1;\n      setStep(nextStep);\n    }\n  };\n\n  var previous = function previous() {\n    var previousStep = formState.step - 1 === FirstStep ? FirstStep : formState.step - 1;\n    setStep(previousStep);\n  };\n\n  var getCurrentView = function getCurrentView() {\n    return steps[formState.step].view;\n  };\n\n  var setStep = function setStep(step) {\n    dispatchFormState({\n      type: LocationFormStateActions.setStep,\n      data: step\n    });\n  };\n\n  var canNext = function canNext() {\n    return steps[formState.step].validator.isValid(formState.location);\n  };\n\n  return {\n    next: next,\n    canNext: canNext,\n    previous: previous,\n    getCurrentView: getCurrentView\n  };\n};\n\nexport default StepsCoordinator;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/frontend/src/components/modals/LocationDetailsForm/Steps/StepsCoordinator.js"],"names":["LocationCoordinatesForm","LocationCoordinatesFormValidator","LocationDetailsForm","LocationDetailsFormValidator","useLocationFormState","LocationFormStateActions","FirstStep","LastStep","steps","view","validator","StepsCoordinator","formState","dispatchFormState","next","canNext","nextStep","step","setStep","previous","previousStep","getCurrentView","type","data","isValid","location"],"mappings":";AAAA,SAAQA,uBAAR,EAAiCC,gCAAjC,EAAmEC,mBAAnE,EAAwFC,4BAAxF,QAA2H,SAA3H;AAEA,SAASC,oBAAT,EAA+BC,wBAA/B,QAA+D,6BAA/D;AAEA,OAAO,IAAMC,SAAS,GAAG,CAAlB;AACP,OAAO,IAAMC,QAAQ,GAAG,CAAjB;AAEP,IAAMC,KAAK,GAAG,CACV;AACIC,EAAAA,IAAI,EAAEP,mBADV;AAEIQ,EAAAA,SAAS,EAAEP,4BAA4B;AAF3C,CADU,EAKV;AACIM,EAAAA,IAAI,EAAET,uBADV;AAEIU,EAAAA,SAAS,EAAET,gCAAgC;AAF/C,CALU,CAAd;;AAUA,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA,8BACYP,oBAAoB,EADhC;AAAA;AAAA,MACpBQ,SADoB;AAAA,MACTC,iBADS;;AAG3B,MAAIC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACb,QAAGC,OAAO,EAAV,EAAa;AACT,UAAIC,QAAQ,GAAGJ,SAAS,CAACK,IAAV,GAAiB,CAAjB,KAAuBV,QAAvB,GAAkCA,QAAlC,GAA6CK,SAAS,CAACK,IAAV,GAAiB,CAA7E;AACAC,MAAAA,OAAO,CAACF,QAAD,CAAP;AACH;AACJ,GALD;;AAOA,MAAIG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACjB,QAAIC,YAAY,GAAGR,SAAS,CAACK,IAAV,GAAiB,CAAjB,KAAuBX,SAAvB,GAAmCA,SAAnC,GAA+CM,SAAS,CAACK,IAAV,GAAiB,CAAnF;AACAC,IAAAA,OAAO,CAACE,YAAD,CAAP;AACH,GAHD;;AAKA,MAAIC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACvB,WAAOb,KAAK,CAACI,SAAS,CAACK,IAAX,CAAL,CAAsBR,IAA7B;AACH,GAFD;;AAIA,MAAIS,OAAO,GAAG,SAAVA,OAAU,CAACD,IAAD,EAAU;AACpBJ,IAAAA,iBAAiB,CAAC;AAACS,MAAAA,IAAI,EAAEjB,wBAAwB,CAACa,OAAhC;AAAyCK,MAAAA,IAAI,EAAEN;AAA/C,KAAD,CAAjB;AACH,GAFD;;AAIA,MAAIF,OAAO,GAAG,SAAVA,OAAU,GAAM;AAChB,WAAOP,KAAK,CAACI,SAAS,CAACK,IAAX,CAAL,CAAsBP,SAAtB,CAAgCc,OAAhC,CAAwCZ,SAAS,CAACa,QAAlD,CAAP;AACH,GAFD;;AAIA,SAAO;AACHX,IAAAA,IAAI,EAAEA,IADH;AAEHC,IAAAA,OAAO,EAAEA,OAFN;AAGHI,IAAAA,QAAQ,EAAEA,QAHP;AAIHE,IAAAA,cAAc,EAAEA;AAJb,GAAP;AAMH,CAjCD;;AAmCA,eAAeV,gBAAf","sourcesContent":["import {LocationCoordinatesForm, LocationCoordinatesFormValidator, LocationDetailsForm, LocationDetailsFormValidator} from './Steps'\r\n\r\nimport { useLocationFormState, LocationFormStateActions } from '../LocationDetailsFormState'\r\n\r\nexport const FirstStep = 0;\r\nexport const LastStep = 1;\r\n\r\nconst steps = [\r\n    {\r\n        view: LocationDetailsForm, \r\n        validator: LocationDetailsFormValidator()\r\n    }, \r\n    {\r\n        view: LocationCoordinatesForm, \r\n        validator: LocationCoordinatesFormValidator()\r\n    }]\r\n\r\nconst StepsCoordinator = () => {\r\n    const [formState, dispatchFormState] = useLocationFormState();\r\n\r\n    var next = () => {\r\n        if(canNext()){\r\n            var nextStep = formState.step + 1 === LastStep ? LastStep : formState.step + 1;\r\n            setStep(nextStep);\r\n        }\r\n    }\r\n\r\n    var previous = () => {\r\n        var previousStep = formState.step - 1 === FirstStep ? FirstStep : formState.step - 1;\r\n        setStep(previousStep);\r\n    }\r\n\r\n    var getCurrentView = () => {\r\n        return steps[formState.step].view\r\n    }\r\n\r\n    var setStep = (step) => {\r\n        dispatchFormState({type: LocationFormStateActions.setStep, data: step});\r\n    }\r\n\r\n    var canNext = () => {\r\n        return steps[formState.step].validator.isValid(formState.location);\r\n    }\r\n\r\n    return {\r\n        next: next, \r\n        canNext: canNext,\r\n        previous: previous,\r\n        getCurrentView: getCurrentView\r\n    }\r\n}\r\n\r\nexport default StepsCoordinator;"]},"metadata":{},"sourceType":"module"}