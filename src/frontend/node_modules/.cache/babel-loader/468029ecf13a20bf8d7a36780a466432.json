{"ast":null,"code":"import _defineProperty from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\src\\\\components\\\\modals\\\\LocationDetailsForm\\\\Steps\\\\Steps.js\";\nimport React from 'react';\nimport LocationAttractivnessButton from '../../../Locations/LocationAttractivnessButton';\nimport LocationFormMapView from '../../../MapView/LocationFormMapView';\nimport CoordinatesValidator from '../../../../Common/CoordinatesValidator';\nimport { useLocationFormState, LocationFormStateActions } from '../LocationDetailsFormState';\nvar ERROR_MESSAGE = \"Incorrect value\";\nexport var LocationDetailsForm = function LocationDetailsForm() {\n  var _useLocationFormState = useLocationFormState(),\n      _useLocationFormState2 = _slicedToArray(_useLocationFormState, 2),\n      formState = _useLocationFormState2[0],\n      dispatchFormState = _useLocationFormState2[1];\n\n  var handleInputChanged = function handleInputChanged(e) {\n    dispatchFormState({\n      type: LocationFormStateActions.updateLocation,\n      data: _objectSpread({}, formState.location, _defineProperty({}, e.target.name, e.target.value))\n    });\n  };\n\n  var handleAttractivnessChanged = function handleAttractivnessChanged(value) {\n    dispatchFormState({\n      type: LocationFormStateActions.updateLocation,\n      data: _objectSpread({}, formState.location, {\n        attractivness: value\n      })\n    });\n  };\n\n  return React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"location-edit-form-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"location-name\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Name (required)\"), React.createElement(\"input\", {\n    name: \"name\",\n    className: \"form-control\",\n    id: \"location-name\",\n    onChange: handleInputChanged,\n    value: formState.location.name || '',\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"location-edit-form-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Atractivness:\", React.createElement(LocationAttractivnessButton, {\n    value: formState.location.attractivness || '',\n    onSelect: function onSelect(value) {\n      handleAttractivnessChanged(value);\n    },\n    isActive: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"location-edit-form-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"location-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Description\"), React.createElement(\"textarea\", {\n    name: \"description\",\n    className: \"form-control\",\n    rows: \"5\",\n    id: \"location-description\",\n    onChange: handleInputChanged,\n    value: formState.location.description || '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))));\n};\nexport var LocationDetailsFormValidator = function LocationDetailsFormValidator() {\n  var isValid = function isValid(location) {\n    return !!location.name;\n  };\n\n  return {\n    isValid: isValid\n  };\n};\nexport var LocationCoordinatesForm = function LocationCoordinatesForm() {\n  var _useLocationFormState3 = useLocationFormState(),\n      _useLocationFormState4 = _slicedToArray(_useLocationFormState3, 2),\n      formState = _useLocationFormState4[0],\n      dispatchFormState = _useLocationFormState4[1];\n\n  var handleCoordinatesChanged = function handleCoordinatesChanged(e) {\n    dispatchFormState({\n      type: LocationFormStateActions.updateLocation,\n      data: _objectSpread({}, formState.location, {\n        coordinates: _objectSpread({}, formState.location.coordinates, _defineProperty({}, e.target.name, e.target.value))\n      })\n    });\n  };\n\n  var handleMapCoordinatesChanged = function handleMapCoordinatesChanged(coordinates) {\n    dispatchFormState({\n      type: LocationFormStateActions.updateLocation,\n      data: _objectSpread({}, formState.location, {\n        coordinates: {\n          lat: coordinates.lat,\n          lon: coordinates.lng\n        }\n      })\n    });\n  };\n\n  return React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"location-edit-form-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"location-edit-form-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"location-coordinates-lat\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Gps latitude\"), React.createElement(\"input\", {\n    name: \"lat\",\n    className: \"form-control\",\n    id: \"location-coordinates-lat\",\n    onChange: handleCoordinatesChanged,\n    value: formState.location.coordinates.lat || '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"location-form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, CoordinatesValidator().isValid(formState.location.coordinates.lat) ? \"\" : ERROR_MESSAGE)), React.createElement(\"div\", {\n    className: \"location-edit-form-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"location-coordinates-lon\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Gps longitude\"), React.createElement(\"input\", {\n    name: \"lon\",\n    className: \"form-control\",\n    id: \"location-coordinates-lon\",\n    onChange: handleCoordinatesChanged,\n    value: formState.location.coordinates.lon || '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"location-form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, CoordinatesValidator().isValid(formState.location.coordinates.lon) ? \"\" : ERROR_MESSAGE))), React.createElement(\"div\", {\n    className: \"location-edit-form-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(LocationFormMapView, {\n    location: formState.location,\n    onCoordinatesUpdated: handleMapCoordinatesChanged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })));\n};\nexport var LocationCoordinatesFormValidator = function LocationCoordinatesFormValidator() {\n  var isValid = function isValid(location) {\n    return CoordinatesValidator().isValid(location.coordinates.lat) && CoordinatesValidator().isValid(location.coordinates.lon);\n  };\n\n  return {\n    isValid: isValid\n  };\n};","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/components/modals/LocationDetailsForm/Steps/Steps.js"],"names":["React","LocationAttractivnessButton","LocationFormMapView","CoordinatesValidator","useLocationFormState","LocationFormStateActions","ERROR_MESSAGE","LocationDetailsForm","formState","dispatchFormState","handleInputChanged","e","type","updateLocation","data","location","target","name","value","handleAttractivnessChanged","attractivness","description","LocationDetailsFormValidator","isValid","LocationCoordinatesForm","handleCoordinatesChanged","coordinates","handleMapCoordinatesChanged","lat","lon","lng","LocationCoordinatesFormValidator"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport LocationAttractivnessButton from '../../../Locations/LocationAttractivnessButton'\r\nimport LocationFormMapView from '../../../MapView/LocationFormMapView'\r\nimport CoordinatesValidator from '../../../../Common/CoordinatesValidator'\r\n\r\nimport { useLocationFormState, LocationFormStateActions } from '../LocationDetailsFormState'\r\n\r\nconst ERROR_MESSAGE = \"Incorrect value\";\r\n\r\nexport const LocationDetailsForm = () => {\r\n    const [formState, dispatchFormState] = useLocationFormState();\r\n\r\n    var handleInputChanged = (e) => {\r\n        dispatchFormState({type: LocationFormStateActions.updateLocation, data: {...formState.location, [e.target.name]: e.target.value }})\r\n    }\r\n\r\n    var handleAttractivnessChanged = (value) => {\r\n        dispatchFormState({type: LocationFormStateActions.updateLocation, data: {...formState.location, attractivness: value}})\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <div >\r\n                <div className=\"location-edit-form-item\">\r\n                    <label htmlFor=\"location-name\" className=\"col-form-label\">Name (required)</label>\r\n                    <input \r\n                        name=\"name\" \r\n                        className=\"form-control\" \r\n                        id=\"location-name\" \r\n                        onChange={handleInputChanged}\r\n                        value={formState.location.name || ''}\r\n                        autoFocus/>\r\n                </div>\r\n                \r\n                <div className=\"location-edit-form-item\">\r\n                    Atractivness:\r\n                    <LocationAttractivnessButton \r\n                            value={formState.location.attractivness || ''} \r\n                            onSelect={(value)=>{handleAttractivnessChanged(value)}} \r\n                            isActive={true}/>\r\n                </div>\r\n                <div className=\"location-edit-form-item\">\r\n                    <label htmlFor=\"location-description\">Description</label>\r\n                    <textarea \r\n                        name=\"description\" \r\n                        className=\"form-control\" \r\n                        rows=\"5\" id=\"location-description\" \r\n                        onChange={handleInputChanged}\r\n                        value={formState.location.description || ''}></textarea>\r\n                </div>\r\n                \r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport const LocationDetailsFormValidator = () => {\r\n\r\n    var isValid = (location) => {\r\n        return !!location.name;\r\n    }\r\n\r\n    return {isValid: isValid};\r\n}\r\n\r\nexport const LocationCoordinatesForm = () => {\r\n    const [formState, dispatchFormState] = useLocationFormState();\r\n\r\n    var handleCoordinatesChanged = (e) => {\r\n        dispatchFormState({type: LocationFormStateActions.updateLocation, data: \r\n                                                                        {\r\n                                                                            ...formState.location, \r\n                                                                            coordinates: {\r\n                                                                                ...formState.location.coordinates, \r\n                                                                                [e.target.name]: e.target.value \r\n                                                                        }}})\r\n}\r\n\r\n    var handleMapCoordinatesChanged = (coordinates) => {\r\n        dispatchFormState({type: LocationFormStateActions.updateLocation, data: \r\n                                                                                {\r\n                                                                                    ...formState.location,\r\n                                                                                    coordinates: { \r\n                                                                                        lat: coordinates.lat, \r\n                                                                                        lon: coordinates.lng \r\n                                                                                }}})\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <div className=\"location-edit-form-row\">\r\n                <div className=\"location-edit-form-item\">\r\n                    <label htmlFor=\"location-coordinates-lat\" className=\"col-form-label\">Gps latitude</label>\r\n                    <input \r\n                        name=\"lat\" \r\n                        className=\"form-control\" \r\n                        id=\"location-coordinates-lat\" \r\n                        onChange={handleCoordinatesChanged}\r\n                        value={formState.location.coordinates.lat || ''}/>\r\n                        <div className=\"location-form-error\">{CoordinatesValidator().isValid(formState.location.coordinates.lat) ? \"\" : ERROR_MESSAGE}</div> \r\n                </div>\r\n                \r\n                <div className=\"location-edit-form-item\">\r\n                    <label htmlFor=\"location-coordinates-lon\" className=\"col-form-label\">Gps longitude</label>\r\n                    <input \r\n                        name=\"lon\" \r\n                        className=\"form-control\" \r\n                        id=\"location-coordinates-lon\" \r\n                        onChange={handleCoordinatesChanged}\r\n                        value={formState.location.coordinates.lon || ''}/>\r\n                        <div className=\"location-form-error\">{CoordinatesValidator().isValid(formState.location.coordinates.lon) ? \"\" : ERROR_MESSAGE}</div> \r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"location-edit-form-row\">\r\n                    <LocationFormMapView location={formState.location} onCoordinatesUpdated={handleMapCoordinatesChanged}/>\r\n                </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport const LocationCoordinatesFormValidator = () =>{\r\n    var isValid = (location) => {\r\n        return (CoordinatesValidator().isValid(location.coordinates.lat) && CoordinatesValidator().isValid(location.coordinates.lon))\r\n    }\r\n\r\n    return {isValid: isValid};\r\n} "]},"metadata":{},"sourceType":"module"}