{"ast":null,"code":"import _toConsumableArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\frontend\\\\src\\\\State\\\\NotificationState.js\";\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { Notification, DefaultNotificationTimeout } from '../Services/Notification';\nimport useLoggerService from '../Services/Diagnostics/LoggerService';\nvar NotificationTypes = {\n  error: 'error',\n  success: 'success',\n  info: 'info'\n};\nvar NotificationsActions = {\n  show: 'show',\n  hide: 'hide'\n};\nvar NotificationsState = {\n  notifications: [{\n    type: \"\",\n    content: \"\"\n  }]\n};\nvar NotificationStateContext = createContext();\n\nvar NotificationStateProvider = function NotificationStateProvider(_ref) {\n  var children = _ref.children;\n  return React.createElement(NotificationStateContext.Provider, {\n    value: useReducer(_reducer, NotificationsState),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, children);\n};\n\nvar useNotificationState = function useNotificationState() {\n  return useContext(NotificationStateContext);\n};\n\nvar _reducer = function _reducer(state, action) {\n  var logger = useLoggerService();\n\n  switch (action.type) {\n    case NotificationsActions.show:\n      state = _objectSpread({}, state, {\n        notifications: [].concat(_toConsumableArray(state.notifications), [new Notification(action.notificationType, action.data, DefaultNotificationTimeout)])\n      });\n      break;\n\n    case NotificationsActions.hide:\n      var updatedNotifications = state.notifications.filter(function (n) {\n        return n.id !== action.data;\n      }) || [];\n      state = _objectSpread({}, state, {\n        notifications: updatedNotifications\n      });\n      break;\n\n    default:\n      logger.debug(\"[NotificationsState] Action: \\\"\".concat(action.type, \"\\\" not correct.\"));\n  }\n\n  return state;\n};\n\nexport default NotificationStateProvider;\nexport { NotificationStateContext as NotificationContext, NotificationStateProvider, NotificationTypes, NotificationsActions, useNotificationState };","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/frontend/src/State/NotificationState.js"],"names":["React","createContext","useContext","useReducer","Notification","DefaultNotificationTimeout","useLoggerService","NotificationTypes","error","success","info","NotificationsActions","show","hide","NotificationsState","notifications","type","content","NotificationStateContext","NotificationStateProvider","children","_reducer","useNotificationState","state","action","logger","notificationType","data","updatedNotifications","filter","n","id","debug","NotificationContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,EAA0CC,UAA1C,QAA2D,OAA3D;AACA,SAAQC,YAAR,EAAsBC,0BAAtB,QAAuD,0BAAvD;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AAEA,IAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,OADe;AAEtBC,EAAAA,OAAO,EAAE,SAFa;AAGtBC,EAAAA,IAAI,EAAE;AAHgB,CAA1B;AAMA,IAAMC,oBAAoB,GAAG;AACzBC,EAAAA,IAAI,EAAE,MADmB;AAEzBC,EAAAA,IAAI,EAAE;AAFmB,CAA7B;AAKA,IAAMC,kBAAkB,GAAG;AACvBC,EAAAA,aAAa,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,OAAO,EAAE;AAApB,GAAD;AADQ,CAA3B;AAIA,IAAMC,wBAAwB,GAAGjB,aAAa,EAA9C;;AAEA,IAAMkB,yBAAyB,GAAG,SAA5BA,yBAA4B,OAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AAC9C,SACI,oBAAC,wBAAD,CAA0B,QAA1B;AAAmC,IAAA,KAAK,EAAEjB,UAAU,CAACkB,QAAD,EAAWP,kBAAX,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKM,QADL,CADJ;AAKH,CAND;;AAQA,IAAIE,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,SAAMpB,UAAU,CAACgB,wBAAD,CAAhB;AAAA,CAA3B;;AAEA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACE,KAAD,EAAQC,MAAR,EAAmB;AAChC,MAAIC,MAAM,GAAGnB,gBAAgB,EAA7B;;AACA,UAAOkB,MAAM,CAACR,IAAd;AACI,SAAKL,oBAAoB,CAACC,IAA1B;AACIW,MAAAA,KAAK,qBAAOA,KAAP;AAAcR,QAAAA,aAAa,+BAAMQ,KAAK,CAACR,aAAZ,IAA2B,IAAIX,YAAJ,CAAiBoB,MAAM,CAACE,gBAAxB,EAA0CF,MAAM,CAACG,IAAjD,EAAuDtB,0BAAvD,CAA3B;AAA3B,QAAL;AACA;;AACJ,SAAKM,oBAAoB,CAACE,IAA1B;AACI,UAAIe,oBAAoB,GAAGL,KAAK,CAACR,aAAN,CAAoBc,MAApB,CAA2B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASP,MAAM,CAACG,IAApB;AAAA,OAA5B,KAAyD,EAApF;AACAJ,MAAAA,KAAK,qBAAOA,KAAP;AAAcR,QAAAA,aAAa,EAAEa;AAA7B,QAAL;AACA;;AACJ;AACIH,MAAAA,MAAM,CAACO,KAAP,0CAA8CR,MAAM,CAACR,IAArD;AATR;;AAYA,SAAOO,KAAP;AACH,CAfD;;AAiBA,eAAeJ,yBAAf;AACA,SAAQD,wBAAwB,IAAIe,mBAApC,EAAyDd,yBAAzD,EAAoFZ,iBAApF,EAAuGI,oBAAvG,EAA6HW,oBAA7H","sourcesContent":["import React, {createContext, useContext, useReducer} from 'react'\r\nimport {Notification, DefaultNotificationTimeout} from '../Services/Notification'\r\nimport useLoggerService from '../Services/Diagnostics/LoggerService'\r\n\r\nconst NotificationTypes = {\r\n    error: 'error',\r\n    success: 'success',\r\n    info: 'info'\r\n}\r\n\r\nconst NotificationsActions = {\r\n    show: 'show',\r\n    hide: 'hide'\r\n}\r\n\r\nconst NotificationsState = {\r\n    notifications: [{type: \"\", content: \"\"}]\r\n}\r\n\r\nconst NotificationStateContext = createContext();\r\n\r\nconst NotificationStateProvider = ({children}) => {\r\n    return (\r\n        <NotificationStateContext.Provider value={useReducer(_reducer, NotificationsState)}>\r\n            {children}\r\n        </NotificationStateContext.Provider>\r\n    )\r\n}\r\n\r\nvar useNotificationState = () => useContext(NotificationStateContext);\r\n\r\nconst _reducer = (state, action) => {\r\n    var logger = useLoggerService();\r\n    switch(action.type){\r\n        case NotificationsActions.show:\r\n            state = {...state, notifications: [...state.notifications, new Notification(action.notificationType, action.data, DefaultNotificationTimeout)]}\r\n            break;\r\n        case NotificationsActions.hide:\r\n            var updatedNotifications = state.notifications.filter(n => n.id !== action.data) || [];\r\n            state = {...state, notifications: updatedNotifications}\r\n            break;\r\n        default:\r\n            logger.debug(`[NotificationsState] Action: \"${action.type}\" not correct.`);\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default NotificationStateProvider;\r\nexport {NotificationStateContext as NotificationContext, NotificationStateProvider, NotificationTypes, NotificationsActions, useNotificationState}"]},"metadata":{},"sourceType":"module"}