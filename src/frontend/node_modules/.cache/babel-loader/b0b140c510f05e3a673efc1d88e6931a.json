{"ast":null,"code":"import useConsoleLog from './ConsoleLog';\n\nvar useLoggerService = function useLoggerService() {\n  var loggers = [useConsoleLog()];\n\n  var _generateLogMessageWithTimeStamp = function _generateLogMessageWithTimeStamp(level, message) {\n    return \"[\".concat(new Date().toISOString(), \"] [\").concat(level, \"] message\");\n  };\n\n  var error = function error(message) {\n    var logEntry = _generateLogMessageWithTimeStamp('ERR', message);\n\n    loggers.forEach(function (logger) {\n      logger.error(logEntry);\n    });\n  };\n\n  var warning = function warning(message) {\n    var log = _generateLogMessageWithTimeStamp('WAR', message);\n\n    loggers.forEach(function (logger) {\n      logger.warning(logEntry);\n    });\n  };\n\n  var info = function info(message) {\n    var log = _generateLogMessageWithTimeStamp('INF', message);\n\n    loggers.forEach(function (logger) {\n      logger.info(logEntry);\n    });\n  };\n\n  var debug = function debug(message) {\n    var log = _generateLogMessageWithTimeStamp('DBG', message);\n\n    loggers.forEach(function (logger) {\n      logger.debug(logEntry);\n    });\n  };\n\n  return {\n    error: error,\n    warning: warning,\n    info: info,\n    debug: debug\n  };\n};\n\nexport default useLoggerService;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/Services/Diagnostics/LoggerService.js"],"names":["useConsoleLog","useLoggerService","loggers","_generateLogMessageWithTimeStamp","level","message","Date","toISOString","error","logEntry","forEach","logger","warning","log","info","debug"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,cAA1B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3B,MAAMC,OAAO,GAAG,CAACF,aAAa,EAAd,CAAhB;;AAEA,MAAIG,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACC,KAAD,EAAQC,OAAR,EAAoB;AACvD,sBAAW,IAAIC,IAAJ,GAAWC,WAAX,EAAX,gBAAyCH,KAAzC;AACH,GAFD;;AAIA,MAAII,KAAK,GAAG,SAARA,KAAQ,CAACH,OAAD,EAAa;AACrB,QAAII,QAAQ,GAAGN,gCAAgC,CAAC,KAAD,EAAQE,OAAR,CAA/C;;AAEAH,IAAAA,OAAO,CAACQ,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAACH,KAAP,CAAaC,QAAb;AACH,KAFD;AAGH,GAND;;AAQA,MAAIG,OAAO,GAAG,SAAVA,OAAU,CAACP,OAAD,EAAa;AACvB,QAAIQ,GAAG,GAAGV,gCAAgC,CAAC,KAAD,EAAQE,OAAR,CAA1C;;AAEAH,IAAAA,OAAO,CAACQ,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAACC,OAAP,CAAeH,QAAf;AACH,KAFD;AAGH,GAND;;AAQA,MAAIK,IAAI,GAAG,SAAPA,IAAO,CAACT,OAAD,EAAa;AACpB,QAAIQ,GAAG,GAAGV,gCAAgC,CAAC,KAAD,EAAQE,OAAR,CAA1C;;AAEAH,IAAAA,OAAO,CAACQ,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAACG,IAAP,CAAYL,QAAZ;AACH,KAFD;AAGH,GAND;;AAQA,MAAIM,KAAK,GAAG,SAARA,KAAQ,CAACV,OAAD,EAAa;AACrB,QAAIQ,GAAG,GAAGV,gCAAgC,CAAC,KAAD,EAAQE,OAAR,CAA1C;;AAEAH,IAAAA,OAAO,CAACQ,OAAR,CAAgB,UAACC,MAAD,EAAU;AACtBA,MAAAA,MAAM,CAACI,KAAP,CAAaN,QAAb;AACH,KAFD;AAGH,GAND;;AAQA,SAAO;AACHD,IAAAA,KAAK,EAAEA,KADJ;AAEHI,IAAAA,OAAO,EAAEA,OAFN;AAGHE,IAAAA,IAAI,EAAEA,IAHH;AAIHC,IAAAA,KAAK,EAAEA;AAJJ,GAAP;AAMH,CA7CD;;AA+CA,eAAed,gBAAf","sourcesContent":["import useConsoleLog from './ConsoleLog'\r\n\r\nconst useLoggerService = () => {\r\n    const loggers = [useConsoleLog()]\r\n\r\n    var _generateLogMessageWithTimeStamp = (level, message) => {\r\n        return `[${new Date().toISOString()}] [${level}] message`;\r\n    }\r\n\r\n    var error = (message) => {\r\n        var logEntry = _generateLogMessageWithTimeStamp('ERR', message);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.error(logEntry);\r\n        })\r\n    }\r\n\r\n    var warning = (message) => {\r\n        var log = _generateLogMessageWithTimeStamp('WAR', message);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.warning(logEntry);\r\n        })\r\n    }\r\n\r\n    var info = (message) => {\r\n        var log = _generateLogMessageWithTimeStamp('INF', message);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.info(logEntry);\r\n        })\r\n    }\r\n\r\n    var debug = (message) => {  \r\n        var log = _generateLogMessageWithTimeStamp('DBG', message);\r\n\r\n        loggers.forEach((logger)=>{\r\n            logger.debug(logEntry);\r\n        })\r\n    }\r\n\r\n    return {\r\n        error: error,\r\n        warning: warning,\r\n        info: info,\r\n        debug: debug\r\n    }\r\n}\r\n\r\nexport default useLoggerService;"]},"metadata":{},"sourceType":"module"}