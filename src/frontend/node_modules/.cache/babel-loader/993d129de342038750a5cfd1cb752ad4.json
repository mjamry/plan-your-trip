{"ast":null,"code":"import _slicedToArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport useNotificationService from '../Services/NotificationService';\nimport useLoggerService from './Diagnostics/LoggerService';\nimport { useListsState, ListsStateActions } from '../State/LocationsListsState';\nvar DbActions = {\n  add: 'create',\n  delete: 'delete',\n  update: 'update'\n};\n\nvar usePersistentListService = function usePersistentListService() {\n  var logger = useLoggerService();\n\n  var add =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(location, listId) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatchDbAction(DbActions.add, location);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function add(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var remove =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(location) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dispatchDbAction(DbActions.delete, location);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function remove(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var edit =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(location) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return dispatchDbAction(DbActions.update, location);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function edit(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    add: add,\n    remove: remove,\n    edit: edit\n  };\n};\n\nvar dispatchDbAction =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(dbAction, data) {\n    var url, logger, rawResponse, content;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            url = 'http://localhost:50000/lists/' + dbAction;\n            logger = useLoggerService();\n            _context4.next = 4;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data)\n            });\n\n          case 4:\n            rawResponse = _context4.sent;\n\n            if (!(rawResponse.status !== 200 && rawResponse.status !== 201)) {\n              _context4.next = 8;\n              break;\n            }\n\n            logger.error(\"[DbPresistentLocationService] Error - Action: \".concat(dbAction), rawResponse);\n            throw new Error(rawResponse);\n\n          case 8:\n            _context4.next = 10;\n            return rawResponse.json();\n\n          case 10:\n            content = _context4.sent;\n            logger.debug(\"[DbPresistentLocationService] Success -> Action: \".concat(dbAction), content);\n            return _context4.abrupt(\"return\", content);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function dispatchDbAction(_x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar useListService = function useListService() {\n  var notificationService = useNotificationService();\n  var persistentListService = usePersistentListService();\n  var logger = useLoggerService();\n\n  var _useListsState = useListsState(),\n      _useListsState2 = _slicedToArray(_useListsState, 2),\n      selectedListId = _useListsState2[0].selectedListId,\n      dispatchLists = _useListsState2[1];\n\n  var setLoading = function setLoading() {\n    dispatchLists({\n      type: ListsStateActions.isLoading,\n      data: true\n    });\n  };\n\n  var clearLoading = function clearLoading() {\n    dispatchLists({\n      type: ListsStateActions.isLoading,\n      data: false\n    });\n  };\n\n  var add =\n  /*#__PURE__*/\n  function () {\n    var _ref5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(list) {\n      var listData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              setLoading();\n              _context5.prev = 1;\n              _context5.next = 4;\n              return persistentListService.add(list, selectedListId);\n\n            case 4:\n              listData = _context5.sent;\n              dispatchLists({\n                type: ListsStateActions.addList,\n                data: listData\n              });\n              notificationService.success(\"New list added: \".concat(listData.name));\n              logger.info(\"[ListService] Successfully added list -> Id: \".concat(listData.id, \" Name: \").concat(listData.name));\n              _context5.next = 14;\n              break;\n\n            case 10:\n              _context5.prev = 10;\n              _context5.t0 = _context5[\"catch\"](1);\n              notificationService.error(\"Error while adding list: \".concat(list.name));\n              logger.error(\"Error while adding new list: Name: \".concat(list.name), _context5.t0);\n\n            case 14:\n              _context5.prev = 14;\n              clearLoading();\n              return _context5.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[1, 10, 14, 17]]);\n    }));\n\n    return function add(_x7) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var edit =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(list) {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              setLoading();\n              _context6.prev = 1;\n              _context6.next = 4;\n              return persistentListService.edit(list);\n\n            case 4:\n              dispatchLists({\n                type: ListsStateActions.editlist,\n                data: list\n              });\n              notificationService.success(\"list modified: \".concat(list.name));\n              logger.info(\"[ListService] Successfully edited list -> Id: \".concat(list.id, \" Name: \").concat(list.name));\n              _context6.next = 13;\n              break;\n\n            case 9:\n              _context6.prev = 9;\n              _context6.t0 = _context6[\"catch\"](1);\n              notificationService.error(\"Error while editing list: \".concat(list.name));\n              logger.error(\"Error while editing list: Id: \".concat(list.id, \" Name: \").concat(list.name), _context6.t0);\n\n            case 13:\n              _context6.prev = 13;\n              clearLoading();\n              return _context6.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[1, 9, 13, 16]]);\n    }));\n\n    return function edit(_x8) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var remove =\n  /*#__PURE__*/\n  function () {\n    var _ref7 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(list) {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              setLoading();\n              _context7.prev = 1;\n              _context7.next = 4;\n              return persistentListService.remove(list);\n\n            case 4:\n              dispatchLists({\n                type: ListsStateActions.removelist,\n                data: list\n              });\n              notificationService.success(\"list removed: \".concat(list.name));\n              logger.info(\"[ListService] Successfully removed list -> Id: \".concat(list.id, \" Name: \").concat(list.name));\n              _context7.next = 13;\n              break;\n\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](1);\n              notificationService.error(\"Error while removing list: \".concat(list.name));\n              logger.error(\"Error while removing list: Id: \".concat(list.id, \" Name: \").concat(list.name), _context7.t0);\n\n            case 13:\n              _context7.prev = 13;\n              clearLoading();\n              return _context7.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[1, 9, 13, 16]]);\n    }));\n\n    return function remove(_x9) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  return {\n    add: add,\n    edit: edit,\n    remove: remove\n  };\n};\n\nexport default useListService;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/Services/ListService.js"],"names":["useNotificationService","useLoggerService","useListsState","ListsStateActions","DbActions","add","delete","update","usePersistentListService","logger","location","listId","dispatchDbAction","remove","edit","dbAction","data","url","fetch","method","headers","body","JSON","stringify","rawResponse","status","error","Error","json","content","debug","useListService","notificationService","persistentListService","selectedListId","dispatchLists","setLoading","type","isLoading","clearLoading","list","listData","addList","success","name","info","id","editlist","removelist"],"mappings":"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","sourcesContent":["\r\nimport useNotificationService from '../Services/NotificationService'\r\nimport useLoggerService from './Diagnostics/LoggerService'\r\nimport { useListsState, ListsStateActions } from '../State/LocationsListsState'\r\n\r\nconst DbActions = {\r\n    add: 'create',\r\n    delete: 'delete',\r\n    update: 'update'\r\n}\r\nconst usePersistentListService = () => {\r\n    const logger = useLoggerService();\r\n\r\n    var add = async (location, listId) => {\r\n        return await dispatchDbAction(DbActions.add, location);\r\n    }\r\n\r\n    var remove = async (location) => {\r\n        await dispatchDbAction(DbActions.delete, location);\r\n    }\r\n\r\n    var edit = async (location) => {\r\n        await dispatchDbAction(DbActions.update, location);\r\n    }\r\n\r\n    return {\r\n        add: add,\r\n        remove: remove,\r\n        edit: edit\r\n    }\r\n}\r\n\r\nconst dispatchDbAction = async (dbAction, data) => {\r\n    let url = 'http://localhost:50000/lists/' + dbAction;\r\n    var logger = useLoggerService();\r\n\r\n    const rawResponse = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n\r\n    if(rawResponse.status !== 200 && rawResponse.status !== 201){\r\n        logger.error(`[DbPresistentLocationService] Error - Action: ${dbAction}`, rawResponse);\r\n        throw new Error(rawResponse);\r\n    }\r\n    \r\n    const content = await rawResponse.json();\r\n    logger.debug(`[DbPresistentLocationService] Success -> Action: ${dbAction}`, content)\r\n    return content;\r\n}\r\n\r\nconst useListService = () => {\r\n    const notificationService = useNotificationService();\r\n    const persistentListService = usePersistentListService();\r\n    const logger = useLoggerService();\r\n    const [{selectedListId}, dispatchLists] = useListsState();\r\n\r\n    var setLoading = () => {\r\n        dispatchLists({\r\n            type: ListsStateActions.isLoading, \r\n            data: true});\r\n    }\r\n\r\n    var clearLoading = () => {\r\n        dispatchLists({\r\n            type: ListsStateActions.isLoading, \r\n            data: false});\r\n    }\r\n\r\n    var add = async (list) => {\r\n        setLoading();\r\n        try{\r\n            var listData = await persistentListService.add(list, selectedListId)\r\n            dispatchLists({\r\n                type: ListsStateActions.addList, \r\n                data: listData});\r\n            \r\n            notificationService.success(`New list added: ${listData.name}`);\r\n            logger.info(`[ListService] Successfully added list -> Id: ${listData.id} Name: ${listData.name}`)\r\n        }\r\n        catch(e)\r\n        {\r\n            notificationService.error(`Error while adding list: ${list.name}`);\r\n            logger.error(`Error while adding new list: Name: ${list.name}`, e);\r\n        }\r\n        finally{\r\n            clearLoading();\r\n        }\r\n  \r\n    }\r\n\r\n    var edit = async (list) => {\r\n        setLoading();\r\n        try{\r\n            await persistentListService.edit(list)\r\n            dispatchLists({\r\n                type: ListsStateActions.editlist, \r\n                data: list})\r\n    \r\n            notificationService.success(`list modified: ${list.name}`);\r\n            logger.info(`[ListService] Successfully edited list -> Id: ${list.id} Name: ${list.name}`)\r\n        }\r\n        catch(e)\r\n        {\r\n            notificationService.error(`Error while editing list: ${list.name}`);\r\n            logger.error(`Error while editing list: Id: ${list.id} Name: ${list.name}`, e);\r\n        }\r\n        finally{\r\n            clearLoading();\r\n        }\r\n    }\r\n\r\n    var remove = async (list) => {\r\n        setLoading();\r\n        try{\r\n            await persistentListService.remove(list)\r\n            dispatchLists({\r\n                type: ListsStateActions.removelist, \r\n                data: list})\r\n                \r\n            notificationService.success(`list removed: ${list.name}`);\r\n            logger.info(`[ListService] Successfully removed list -> Id: ${list.id} Name: ${list.name}`)\r\n        }\r\n        catch(e)\r\n        {\r\n            notificationService.error(`Error while removing list: ${list.name}`);\r\n            logger.error(`Error while removing list: Id: ${list.id} Name: ${list.name}`, e);\r\n        }\r\n        finally{\r\n            clearLoading();\r\n        }\r\n    }\r\n\r\n    return {\r\n        add: add, \r\n        edit: edit, \r\n        remove: remove}\r\n}\r\n\r\nexport default useListService;"]},"metadata":{},"sourceType":"module"}