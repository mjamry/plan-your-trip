{"ast":null,"code":"import _objectDestructuringEmpty from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectDestructuringEmpty\";\nimport _slicedToArray from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\src\\\\components\\\\LocationsDataDownloader.js\";\nimport React, { useEffect } from 'react';\nimport { useLocationsState, LocationsStateActions } from '../State/LocationsState';\nimport { useLocationsListsState, LocationsListsStateActions } from '../State/LocationsListsState';\nimport useLoggerService from '../Services/Diagnostics/LoggerService';\n\nvar LocationsDataDownloader = function LocationsDataDownloader() {\n  var _useLocationsState = useLocationsState(),\n      _useLocationsState2 = _slicedToArray(_useLocationsState, 2);\n\n  _objectDestructuringEmpty(_useLocationsState2[0]);\n\n  var dispatchLocations = _useLocationsState2[1];\n\n  var _useLocationsListsSta = useLocationsListsState(),\n      _useLocationsListsSta2 = _slicedToArray(_useLocationsListsSta, 2),\n      listsState = _useLocationsListsSta2[0],\n      dispatchLists = _useLocationsListsSta2[1];\n\n  var logger = useLoggerService();\n  useEffect(function () {\n    fetch(\"http://localhost:5000/Locations/list/\".concat(listsState.selectedList)).then(function (response) {\n      if (response.status !== 200) {\n        logger.error(\"[LocationsDataDownloader] Cannot fetch locations. Error: \".concat(response.statusText, \". Code: \").concat(response.status));\n      } else {\n        response.json().then(function (data) {\n          if (data) {\n            logger.info(\"Successfully loaded \".concat(data.length, \" locations\"));\n            storeLocation(data);\n          }\n        });\n      }\n    });\n  }, []);\n\n  var storeLocation = function storeLocation(locations) {\n    dispatchLocations({\n      type: LocationsStateActions.loadLocations,\n      data: locations\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nexport default LocationsDataDownloader;","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/src/components/LocationsDataDownloader.js"],"names":["React","useEffect","useLocationsState","LocationsStateActions","useLocationsListsState","LocationsListsStateActions","useLoggerService","LocationsDataDownloader","dispatchLocations","listsState","dispatchLists","logger","fetch","selectedList","then","response","status","error","statusText","json","data","info","length","storeLocation","locations","type","loadLocations"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,yBAAzD;AAEA,SAASC,sBAAT,EAAiCC,0BAAjC,QAAmE,8BAAnE;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAAA,2BACFL,iBAAiB,EADf;AAAA;;AAAA;;AAAA,MACvBM,iBADuB;;AAAA,8BAEEJ,sBAAsB,EAFxB;AAAA;AAAA,MAE3BK,UAF2B;AAAA,MAEfC,aAFe;;AAIlC,MAAIC,MAAM,GAAGL,gBAAgB,EAA7B;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,KAAK,gDAAyCH,UAAU,CAACI,YAApD,EAAL,CACKC,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzBL,QAAAA,MAAM,CAACM,KAAP,oEAAyEF,QAAQ,CAACG,UAAlF,qBAAuGH,QAAQ,CAACC,MAAhH;AACH,OAFD,MAGK;AACDD,QAAAA,QAAQ,CAACI,IAAT,GACKL,IADL,CACU,UAAAM,IAAI,EAAI;AACV,cAAIA,IAAJ,EAAU;AACNT,YAAAA,MAAM,CAACU,IAAP,+BAAmCD,IAAI,CAACE,MAAxC;AACAC,YAAAA,aAAa,CAACH,IAAD,CAAb;AACH;AAEJ,SAPL;AAQH;AACJ,KAfL;AAgBH,GAjBQ,EAiBN,EAjBM,CAAT;;AAmBA,MAAIG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAe;AAC/BhB,IAAAA,iBAAiB,CAAC;AACdiB,MAAAA,IAAI,EAAEtB,qBAAqB,CAACuB,aADd;AAEdN,MAAAA,IAAI,EAAEI;AAFQ,KAAD,CAAjB;AAIH,GALD;;AAOA,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAjCD;;AAmCA,eAAejB,uBAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useLocationsState, LocationsStateActions } from '../State/LocationsState'\r\n\r\nimport { useLocationsListsState, LocationsListsStateActions } from '../State/LocationsListsState'\r\nimport useLoggerService from '../Services/Diagnostics/LoggerService'\r\n\r\nconst LocationsDataDownloader = () => {\r\n    const [{}, dispatchLocations] = useLocationsState();\r\n    const [listsState, dispatchLists] = useLocationsListsState();\r\n\r\n    var logger = useLoggerService();\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/Locations/list/${listsState.selectedList}`)\r\n            .then(response => {\r\n                if (response.status !== 200) {\r\n                    logger.error(`[LocationsDataDownloader] Cannot fetch locations. Error: ${response.statusText}. Code: ${response.status}`)\r\n                }\r\n                else {\r\n                    response.json()\r\n                        .then(data => {\r\n                            if (data) {\r\n                                logger.info(`Successfully loaded ${data.length} locations`)\r\n                                storeLocation(data);\r\n                            }\r\n\r\n                        })\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    var storeLocation = (locations) => {\r\n        dispatchLocations({\r\n            type: LocationsStateActions.loadLocations,\r\n            data: locations\r\n        })\r\n    }\r\n\r\n    return (<div></div>);\r\n}\r\n\r\nexport default LocationsDataDownloader;"]},"metadata":{},"sourceType":"module"}