{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\priv\\\\github\\\\plan-your-trip\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar useDbLog = function useDbLog() {\n  var error = function error(logEntry) {\n    storelog(logEntry);\n  };\n\n  var warning = function warning(logEntry) {\n    storelog(logEntry);\n  };\n\n  var info = function info(logEntry) {//for now store only error and warning\n    //storelog(logEntry);\n  };\n\n  var debug = function debug(logEntry) {//for now store only error and warning\n    //storelog(logEntry);\n  };\n\n  return {\n    error: error,\n    warning: warning,\n    info: info,\n    debug: debug\n  };\n};\n\nexport default useDbLog;\n\nvar storelog =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(log) {\n    var url, rawResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = 'http://localhost:50000/diagnostics/logs/create';\n            _context.next = 3;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(log)\n            });\n\n          case 3:\n            rawResponse = _context.sent;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function storelog(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["E:/priv/github/plan-your-trip/frontend/src/Services/Diagnostics/DbLog.js"],"names":["useDbLog","error","logEntry","storelog","warning","info","debug","log","url","fetch","method","headers","body","JSON","stringify","rawResponse"],"mappings":";;;AACA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,MAAIC,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAAc;AACtBC,IAAAA,QAAQ,CAACD,QAAD,CAAR;AACH,GAFD;;AAIA,MAAIE,OAAO,GAAG,SAAVA,OAAU,CAACF,QAAD,EAAc;AACxBC,IAAAA,QAAQ,CAACD,QAAD,CAAR;AACH,GAFD;;AAIA,MAAIG,IAAI,GAAG,SAAPA,IAAO,CAACH,QAAD,EAAc,CACrB;AACA;AACH,GAHD;;AAKA,MAAII,KAAK,GAAG,SAARA,KAAQ,CAACJ,QAAD,EAAc,CACtB;AACA;AACH,GAHD;;AAKA,SAAO;AACHD,IAAAA,KAAK,EAAEA,KADJ;AAEHG,IAAAA,OAAO,EAAEA,OAFN;AAGHC,IAAAA,IAAI,EAAEA,IAHH;AAIHC,IAAAA,KAAK,EAAEA;AAJJ,GAAP;AAMH,CAzBD;;AA2BA,eAAeN,QAAf;;AAEA,IAAMG,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOI,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,GADS,GACH,gDADG;AAAA;AAAA,mBAGaC,KAAK,CAACD,GAAD,EAAM;AACjCE,cAAAA,MAAM,EAAE,MADyB;AAEjCC,cAAAA,OAAO,EAAE;AACL,0BAAU,kBADL;AAEL,gCAAgB;AAFX,eAFwB;AAMjCC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,GAAf;AAN2B,aAAN,CAHlB;;AAAA;AAGPQ,YAAAA,WAHO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARZ,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["\r\nconst useDbLog = () => {\r\n    var error = (logEntry) => {\r\n        storelog(logEntry);\r\n    }\r\n\r\n    var warning = (logEntry) => {\r\n        storelog(logEntry);\r\n    }\r\n\r\n    var info = (logEntry) => {\r\n        //for now store only error and warning\r\n        //storelog(logEntry);\r\n    }\r\n\r\n    var debug = (logEntry) => {  \r\n        //for now store only error and warning\r\n        //storelog(logEntry);\r\n    }\r\n\r\n    return {\r\n        error: error,\r\n        warning: warning,\r\n        info: info,\r\n        debug: debug\r\n    }\r\n}\r\n\r\nexport default useDbLog;\r\n\r\nconst storelog = async (log) => {\r\n    let url = 'http://localhost:50000/diagnostics/logs/create';\r\n\r\n    const rawResponse = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(log)\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}